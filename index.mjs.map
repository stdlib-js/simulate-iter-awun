{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor' ;\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor' ;\nimport isIteratorLike from '@stdlib/assert-is-iterator-like' ;\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert-is-positive-number' ;\nimport isPlainObject from '@stdlib/assert-is-plain-object' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport isUint32Array from '@stdlib/assert-is-uint32array' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport copy from '@stdlib/utils-copy' ;\nimport noop from '@stdlib/utils-noop' ;\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport iteratorSymbol from '@stdlib/symbol-iterator' ;\nimport { factory as randu } from '@stdlib/random-base-uniform' ;\nimport SQRT_THREE from '@stdlib/constants-float64-sqrt-three' ;\nimport DEFAULTS from './defaults.json' ;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white uniform noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a uniform distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = \\frac{(b-a)^2}{12}\n*     ```\n*\n*     where \\\\( a \\\\) is the minimum support and \\\\( b \\\\) is the maximum support.\n*\n* -   Accordingly, to generate uniform noise having zero mean and a desired standard deviation, we let \\\\( a = -b \\\\) and solve for \\\\( b \\\\).\n*\n*     ```tex\n*     \\begin{align*}\n*     \\sigma &= \\frac{b-a}{\\sqrt{12}} \\\\\n*     \\sigma \\sqrt{12} &= b - a \\\\\n*     2 \\sigma \\sqrt{3} &= b - (-b) \\\\\n*     2 \\sigma \\sqrt{3} &= 2b \\\\\n*     b &= \\sigma \\sqrt{3}\n*     \\end{align*}\n*     ```\n*\n*     where \\\\( \\sigma \\\\) is the standard deviation.\n*\n* -   Thus, to generate uniform noise having zero mean and a desired standard deviation, we sample from \\\\( \\operatorname{unif}(-sigma\\sqrt{3}, sigma\\sqrt{3}) \\\\).\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* import iterSineWave from '@stdlib/simulate-iter-sine-wave' ;\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawun( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawun( iterator, sigma, options ) {\n\tvar runif;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar a;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0RT48', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( '0RT7T', sigma ) );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0RT8b', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( '0RT30', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( '0RT7M', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( '0RT7I', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( '0RT7N', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\ta = sigma * SQRT_THREE;\n\trunif = randu( -a, a, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', runif.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn runif.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn runif.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn runif.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn runif.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn runif.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trunif.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + runif();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawun( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterawun;\n"],"names":["iterawun","iterator","sigma","options","runif","opts","iter","FLG","a","isIteratorLike","TypeError","format","isPositiveNumber","copy","DEFAULTS","arguments","length","isPlainObject","hasOwnProp","isBoolean","isFunction","prng","state","isUint32Array","seed","randu","SQRT_THREE","setReadOnly","next","end","iteratorSymbol","factory","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","seedLength","stateLength","byteLength","s","v","done","value","NaN"],"mappings":";;ylDA2GA,SAASA,EAAUC,EAAUC,EAAOC,GACnC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAgBR,GACrB,MAAM,IAAIS,UAAWC,EAAQ,QAASV,IAEvC,IAAMW,EAAkBV,GACvB,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAGvC,GADAG,EAAOQ,EAAMC,GACRC,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAed,GACpB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvC,GAAKe,EAAYf,EAAS,UACzBE,EAAKQ,KAAOV,EAAQU,MACdM,EAAWhB,EAAQU,OACxB,MAAM,IAAIH,UAAWC,EAAQ,QAAS,OAAQR,EAAQU,OAGxD,GAAKK,EAAYf,EAAS,QAAW,CACpC,IAAMiB,EAAYjB,EAAQkB,MACzB,MAAM,IAAIX,UAAWC,EAAQ,QAAS,OAAQR,EAAQkB,OAEvDhB,EAAKgB,KAAOlB,EAAQkB,UAGhB,GAAKH,EAAYf,EAAS,UAE9B,GADAE,EAAKiB,MAAQnB,EAAQmB,OACfC,EAAepB,EAAQmB,OAC5B,MAAM,IAAIZ,UAAWC,EAAQ,QAAS,QAASR,EAAQmB,aAIpD,GAAKJ,EAAYf,EAAS,UAC9BE,EAAKmB,KAAOrB,EAAQqB,UACE,IAAjBrB,EAAQqB,MACZ,MAAM,IAAId,UAAWC,EAAQ,QAAS,OAAQR,EAAQqB,OAgCzD,OA3BApB,EAAQqB,IADRjB,EAAIN,EAAQwB,GACOlB,EAAGH,GAItBsB,EADArB,EAAO,GACY,OAAQsB,GAC3BD,EAAarB,EAAM,SAAUuB,GAGxBC,GAAkBV,EAAYnB,EAAU6B,KAC5CH,EAAarB,EAAMwB,EAAgBC,GAG/B5B,GAAWA,EAAQkB,MACvBM,EAAarB,EAAM,OAAQ,MAC3BqB,EAAarB,EAAM,aAAc,MACjC0B,EAAsB1B,EAAM,QAAS2B,EAAkB,MAAQC,GAC/DP,EAAarB,EAAM,cAAe,MAClCqB,EAAarB,EAAM,aAAc,MACjCqB,EAAarB,EAAM,OAAQH,EAAQkB,QAEnCc,EAAqB7B,EAAM,OAAQ8B,GACnCD,EAAqB7B,EAAM,aAAc+B,GACzCL,EAAsB1B,EAAM,QAASgC,EAAUC,GAC/CJ,EAAqB7B,EAAM,cAAekC,GAC1CL,EAAqB7B,EAAM,aAAcmC,GACzCd,EAAarB,EAAM,OAAQF,EAAMsC,OAE3BpC,EAQP,SAAS8B,IACR,OAAOhC,EAAMoB,KASd,SAASa,IACR,OAAOjC,EAAMuC,WASd,SAASH,IACR,OAAOpC,EAAMwC,YASd,SAASH,IACR,OAAOrC,EAAMyC,WASd,SAASP,IACR,OAAOlC,EAAMkB,MAUd,SAASiB,EAAUO,GAClB1C,EAAMkB,MAAQwB,EASf,SAASlB,IACR,IAAImB,EACJ,OAAKxC,EACG,CACNyC,MAAQ,IAGVD,EAAI9C,EAAS2B,QACNoB,MACNzC,GAAM,EACCwC,GAOD,CACNE,MALAF,EADuB,iBAAZA,EAAEE,MACTF,EAAEE,MAAQ7C,IAEV8C,IAIJF,MAAQ,GAWV,SAASnB,EAAKoB,GAEb,OADA1C,GAAM,EACDQ,UAAUC,OACP,CACNiC,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASjB,IACR,OAAO/B,EAAUC,EAAU6B,KAAoB5B,EAAOG"}